#!/bin/bash

# /tmp/.X11-unix/
# /tmp/.X1-lock

action=$1

if [ "$action" == "" ]; then
	action=normal_start
fi

echo ""
echo ""
echo "startx action: ${action}"


function run_once() {
	/usr/libexec/gvfsd &
}

function resize_screen() {
	tmp_fbw=$1
	tmp_fbh=$2

	echo "screent resizing to ${tmp_fbw} ${tmp_fbh}"

	# set -x	# echo on
	# ## 用这种方式切换分辨率，会导致 DisplayWidth() 取到的值 和 从屏幕文件中取到的 fb_width 不一致！
	# # xrandr --fb ${tmp_fbw}x${tmp_fbh}

	xrandr
	mode_name=${tmp_fbw}x${tmp_fbh}
	xrandr --newmode "${mode_name}" \
	109.00 \
	${tmp_fbw} ${tmp_fbw} ${tmp_fbw} ${tmp_fbw}  \
	${tmp_fbh} ${tmp_fbh} ${tmp_fbh} ${tmp_fbh} \
	-hsync +vsync
	xrandr --addmode screen "${mode_name}"
	xrandr -s ${mode_name}
	xrandr

	# set +x	# echo off
}

function xconfig() {
	# 实测在proot环境中无效的配置项
	# Xcursor.size: 64
	# gxmessage*faceSize: 80

	cat <<- EOF > ~/.Xresources

	Xft.dpi: ${VM_DPI}

	xterm*locale: zh_CN.UTF-8
	xterm*faceName: Monospace
	xterm*faceSize: 14
	xterm*scrollBar: true
	xterm*rightScrollBar: true

	gxmessage*locale: zh_CN.UTF-8
	gxmessage*faceName: Monospace

	EOF

	xrdb -merge ~/.Xresources
}

function start_xserver() {

	if [ -f /tmp/x_remote_server_addr ]; then
		x11_redirect_to=`cat /tmp/x_remote_server_addr`
	fi

	if [ "$x11_redirect_to" != "" ]; then
		(sleep 3;echo killing...;pkill controllee) &
		DISPLAY=${x11_redirect_to} controllee -tryxserver
		if [ $? -ne 0]; then
			echo "远端xserver连接失败：${x11_redirect_to}"
			x11_redirect_to=
			rm -rf /tmp/x_remote_server_addr
		fi

	fi

	if [ "$x11_redirect_to" != "" ]; then

		echo "x11 redirecting..."
		pwd

		export DISPLAY=$x11_redirect_to
		export PULSE_SERVER=tcp:127.0.0.1:4713

		if [ -f /tmp/xstarted ]; then
			exit 0
		fi
	
		touch /tmp/xstarted
		if [ "$action" == "normal_start" ]; then
			echo2apk 'LinuxStarted'
		fi

		# 既然已经开启X11重定向的功能，视为XServer已经在远端运行着了
		# 这里将不再启动XServer！
		echo -e "\nX11屏幕转发地址: |${x11_redirect_to}|"
		echo -e "若转发失败，请删除这个文件：/tmp/x_remote_server_addr"
		echo -e "\n\n\n"

	else
		# displayid=6
		displayid=0
		pidof_xserver=

		if [ -f ~/fb_control/controllee ]; then
			echo "found newer controllee at ~/fb_control/controllee"
			cp -f ~/fb_control/controllee ./
			chmod 755 ./controllee
		fi

		for testport in {6000..6005}
		do
			echo "testing port ${testport}"
			controllee -trybind ${testport} 2>/dev/null
			if [ $? -eq 0 ]; then
				displayid=$(($testport-6000))
				break;
			fi
		done

		export DISPLAY=:${displayid}
		export MAX_FRAMEBUFFER_WIDTH=4096
		export MAX_FRAMEBUFFER_HEIGHT=4096
		export PULSE_SERVER=tcp:127.0.0.1:4713


		if [ -f /tmp/xstarted ]; then
			exit 0
		fi

		touch /tmp/xstarted

		if [ "$action" == "normal_start" ]; then
			source ${app_home}/droidvm_startfb.sh
		else
			source ${APP_FBFILENAME}
		fi
		cd ${app_home}

		read tmpuimode < ${tools_dir}/misc/def_xconf/uimode.txt
		export uimode=${tmpuimode}
		xconf_dir=${tools_dir}/misc/def_xconf/uimode_${uimode}
		export VM_DPI=`cat ${xconf_dir}/vm_dpi.txt`


		echo ""
		echo "starting XServer:"
		echo "===================================="
		echo " DISPLAY: $DISPLAY"
		echo "language: ${LC_ALL}"
		echo "  uimode: ${uimode}"
		echo " APP_DPI: ${APP_DPI}"
		echo "  VM_DPI: ${VM_DPI}"
		echo ""

		echo ""
		rm -rf /tmp/.X${displayid}-lock

		# xconfig

		# java 版本的xserver: https://gitee.com/yelam2022/android-xserver
		for xsrv in Xvfb Xtigervnc Xwayland
		do
			echo "$xsrv"
		done

		USE_WAYLAND=0
		if [ ${USE_WAYLAND} -ne 1 ]; then

			export USE_XVFB=1

			if [ ${USE_XVFB} -ne 1 ]; then
				echo "正在启动xserver-tigervnc"
				echo -e "【仅供内部测试用】\n Xtigervnc 走 x11协议，支持xrandr动态调整分辨率(内设的固定分辨率)，改完源码测试，发现Xtigervnc不能在本地显示光标。。。"
				export WST_SCREEN_SAVETO=/exbin/ipc/Xvfb_screen0
				Xtigervnc +extension XTEST +extension XFIXES +extension DAMAGE -retro ${DISPLAY} \
				-geometry ${RECOMMEND_SCREEN_WIDTH}x${RECOMMEND_SCREEN_HEIGHT} -depth 24 -dpi ${VM_DPI} +extension MIT-SHM &
				sleep 1
				pidof_xserver=`pidof Xtigervnc`
			else
				echo "正在启动xserver-xvfb"
				echo -e "xvfb 走 x11 协议，可在小于${RECOMMEND_SCREEN_WIDTH}x${RECOMMEND_SCREEN_HEIGHT}的范围内，动态调整任意的分辨率"
				export WST_SCREEN_SAVETO=/exbin/ipc/Xvfb_screen0

				# # 这几行指令会触发跟鸿蒙4.0一样的错误现象
				# mkdir -p /tmp/.X11-unix/X0 2>/dev/null
				# echo "ls -al /tmp/.X11-unix/"
				# ls -al /tmp/.X11-unix/

				Xvfb +extension XTEST +extension XFIXES +extension DAMAGE +extension RANDR +extension DOUBLE-BUFFER \
				-ac -listen tcp ${DISPLAY} -screen 0 ${MAX_FRAMEBUFFER_WIDTH}x${MAX_FRAMEBUFFER_HEIGHT}x24 -fbdir ${app_home}/ipc -dpi ${VM_DPI} &
				# nohup Xvfb +extension XTEST +extension XFIXES +extension DAMAGE +extension RANDR +extension DOUBLE-BUFFER \
				# -ac -listen tcp ${DISPLAY} -screen 0 ${MAX_FRAMEBUFFER_WIDTH}x${MAX_FRAMEBUFFER_HEIGHT}x24 -fbdir ${app_home}/ipc -dpi ${VM_DPI} &
				# -a -nocursor 

				# 分辨率比较大的时候，映射fb文件耗时久一点， 所以这里比其它两个xserver多等一秒钟
				sleep 0.1
				pidof_xserver=`pidof Xvfb`
				# if [ ${action} == "normal_start" ]; then
				# fi

				if [ "$pidof_xserver" == "" ]; then
					echo ""
					echo ""
					echo "鸿蒙4.0中不能创建 unix-socket 文件？"
					Xvfb +extension XTEST +extension XFIXES +extension DAMAGE +extension RANDR +extension DOUBLE-BUFFER \
					-ac -listen tcp -nolisten unix   ${DISPLAY} -screen 0 ${MAX_FRAMEBUFFER_WIDTH}x${MAX_FRAMEBUFFER_HEIGHT}x24 -fbdir ${app_home}/ipc -dpi ${VM_DPI} &

					sleep 0.1
					pidof_xserver=`pidof Xvfb`
				fi
			fi
		else
				echo -e "【仅供内部测试用】\n weston 走 wayland 协议，不支持动态调整分辨率，实测单独使用wayland很好，但套接一个xserver，就出奇的慢"
				export XDG_RUNTIME_DIR=${HOME}
				export WST_SCREEN_SAVETO=/exbin/ipc/Xvfb_screen0
				unset WAYLAND_DISPLAY
				# weston -B headless-backend.so --xwayland --use-gl --width=${RECOMMEND_SCREEN_WIDTH} --height=${RECOMMEND_SCREEN_HEIGHT} & # --scale=5 &
				weston -B headless-backend.so --use-gl --width=${RECOMMEND_SCREEN_WIDTH} --height=${RECOMMEND_SCREEN_HEIGHT} >/dev/null 2>&1 & # --scale=5 &
				export WAYLAND_DISPLAY=wayland-1
				sleep 2

				echo "正在启动xserver-xwayland"
				Xwayland ${DISPLAY} +extension XTEST +extension XFIXES +extension DAMAGE -ac -dpi ${VM_DPI} &
				pidof_xserver=`pidof Xwayland`
				sleep 1
		fi

		echo -e "\n\n"
		echo "===================================="
		echo "xserver进程ID: $pidof_xserver"
		echo "===================================="
		echo -e "\n\n"

		if [ "$pidof_xserver" == "" ]; then
			echo -e "图形进程启动失败! \n你需要卸载掉虚拟电脑并重新安装！\n\n注意：\n 在虚拟系统安装过程中，请不要切换应用"
			echo "$action"

			if [ "$action" == "normal_start" ]; then
				exit 2
			fi

		fi

		if [ -f /tmp/enable_webctrl ]; then
			ENABLE_WEB_CONTROL=" -enablews"
		fi

		echo "starting controllee: ${action}"

		# -enablews 
		# controllee -enablepc -block_size 100 -onreschange /exbin/tools/vm_startx.sh -fbin /exbin/ipc/Xvfb_screen0 2>&1 >$APP_STDIO_NAME &
		controllee -enablepc -block_size 100 -onreschange /exbin/tools/vm_startx.sh -fbin /exbin/ipc/Xvfb_screen0 2>&1 &
		# nohup controllee -enablepc -block_size 100 -onreschange /exbin/tools/vm_startx.sh -fbin /exbin/ipc/Xvfb_screen0 2>&1 &

		# bash

		if [ "$action" == "normal_start" ]; then
			echo2apk 'LinuxStarted'
		fi


	fi
}

function close_xserver() {
	rm -rf /tmp/xstarted

	pkill Xvfb
	pkill Xtigervnc
	pkill weston
	pkill controllee
}

function autoruns_before_gui() {
	dir_scripts=/etc/autoruns/autoruns_before_gui
    if [ -d ${dir_scripts} ]; then
        # ls -al ${dir_scripts}
        echo "${dir_scripts} 加载中..."
        for i in ${dir_scripts}/*.sh; do
            if [ -r $i ]; then
                echo "$i"
                . $i
            fi
        done
        unset i
    fi
}

function autoruns_after_gui() {
    # lxterminal patch
	dir_scripts=/etc/autoruns/autoruns_after_gui
    if [ -d ${dir_scripts} ]; then
        # ls -al ${dir_scripts}
        echo "${dir_scripts} 加载中..."
        for i in ${dir_scripts}/*.sh; do
            if [ -r $i ]; then
                echo "$i"
                . $i
            fi
        done
        unset i
    fi
}


function setup_theme() {
	echo "正在设置 系统主题 环境变量"
	# export GTK2_RC_FILES=/usr/share/themes/Adwaita/gtk-2.0/gtkrc

	mkdir -p ~/.config/gtk2/
	echo ''								> ~/.config/gtk2/gtkrc
	echo 'include "gtk_icon.rc"'		>>~/.config/gtk2/gtkrc
	echo 'include "gtk_theme.rc"'		>>~/.config/gtk2/gtkrc
	echo ''														>>~/.config/gtk2/gtkrc
	# echo 'include "/usr/share/themes/Adwaita/gtk-2.0/gtkrc"'	>>~/.config/gtk2/gtkrc

	if [ ! -f ~/.config/gtk2/gtk_theme.rc ]; then
		echo 'gtk-theme-name = "Adwaita"'						> ~/.config/gtk2/gtk_theme.rc
	fi

	if [ ! -f ~/.config/gtk2/gtk_icon.rc ]; then
		# echo 'gtk-icon-theme-name = "Adwaita"'					> ~/.config/gtk2/gtk_icon.rc
		echo 'gtk-icon-theme-name = "elementary-xfce"'			> ~/.config/gtk2/gtk_icon.rc
		echo 'gtk-cursor-theme-size = 64'						>>~/.config/gtk2/gtk_icon.rc
	fi

	export GTK2_RC_FILES=~/.config/gtk2/gtkrc



}

function setup_vars() {
	export PATH=$PATH:/usr/games
}

function start_xwindowmgr() {
	if [ "${force_copy_xconf_files}" == "" ] || [ ${force_copy_xconf_files} -eq 0 ]; then
		if [ -f ${APP_FILENAME_URLTOOLS} ]; then
			export force_copy_xconf_files=1
		else
			export force_copy_xconf_files=0
		fi
	fi
	source ${tools_dir}/vm_configx.sh
	source ${tools_dir}/vm_onXstarted.sh

	setup_theme
	setup_vars

	ps -ax | grep virgl_test_server | grep -v grep
	if [ $? -eq 0 ]; then
		# export GALLIUM_DRIVER=virpipe
		# export MESA_GL_VERSION_OVERRIDE=4.0
		echo ""
	fi


	# echo "USE_XFCE4_3: ${USE_XFCE4}"
	tmp_dsk_file="${HOME}/Desktop/switch_desktop_env.desktop"
	if [ ${USE_XFCE4} -eq 0 ]; then
		echo "正在启动 jwm"
		jwm &
		sleep 1
		pcmanfm --desktop &

		which startxfce4 >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			echo "[Desktop Entry]"				> ${tmp_dsk_file}
			echo "Encoding=UTF-8"				>>${tmp_dsk_file}
			echo "Version=0.9.4"				>>${tmp_dsk_file}
			echo "Type=Application"				>>${tmp_dsk_file}
			echo "Name=切换到xfce"				>>${tmp_dsk_file}
			echo "Exec=/exbin/tools/vm_set_desktop_env.sh xfce"	>>${tmp_dsk_file}
			echo ""								>>${tmp_dsk_file}
		fi
	else
		echo "正在启动 xfce4"
		unset GALLIUM_DRIVER
		unset MESA_GL_VERSION_OVERRIDE
		startxfce4 &

		echo "[Desktop Entry]"				> ${tmp_dsk_file}
		echo "Encoding=UTF-8"				>>${tmp_dsk_file}
		echo "Version=0.9.4"				>>${tmp_dsk_file}
		echo "Type=Application"				>>${tmp_dsk_file}
		echo "Name=切换到pcmanfm"			>>${tmp_dsk_file}
		echo "Exec=/exbin/tools/vm_set_desktop_env.sh pcmanfm"	>>${tmp_dsk_file}
		echo ""								>>${tmp_dsk_file}
	fi

	# dbus-launch --exit-with-session startxfce4
	# spacefm --desktop &
	# pcmanfm --set-wallpaper=#223366 &
	# jwm &
	# startxfce4 &
	# icewm-session &
	# lxsession -s LXDE &
	# GALLIUM_DRIVER=virpipe  MESA_GL_VERSION_OVERRIDE=4.0 wine explorer /desktop=shell,${RECOMMEND_SCREEN_WIDTH}x${RECOMMEND_SCREEN_HEIGHT} &

	sleep 1

	# Xft.size: 16
	# Xcursor.size: 32		# 这个设置项，不起作用
	# Xcursor.size: 64px	# 这个设置项也不起作用
	# Xcursor.theme: Adwaita
	# cat <<- EOF > ~/.Xresources

	# Xft.dpi: ${VM_DPI}

	# xterm*locale: zh_CN.UTF-8
	# xterm*faceName: Monospace
	# xterm*faceSize: 10
	# xterm*scrollBar: true
	# xterm*rightScrollBar: true

	# gxmessage*locale: zh_CN.UTF-8
	# gxmessage*faceName: Monospace
	# gxmessage*faceSize: 30
	# EOF
	# xrdb -merge ~/.Xresources

	xconfig

	if [ ${USE_XVFB} -eq 1 ]; then
		resize_screen ${RECOMMEND_SCREEN_WIDTH} ${RECOMMEND_SCREEN_HEIGHT}
	fi



	if [ -f ${APP_FILENAME_URLTOOLS} ]; then
		rm -rf ${APP_FILENAME_URLTOOLS}
	fi

	if [ -f /tmp/firsttime_bootmsg.txt ]; then
		gxmessage -title "欢迎使用虚拟电脑" -file /tmp/firsttime_bootmsg.txt  -center
		rm -rf /tmp/firsttime_bootmsg.txt
	fi

	if [ -f /tmp/osbackupmsg.txt ]; then
		gxmessage -title "系统备份信息" -file /tmp/osbackupmsg.txt  -center
		rm -rf /tmp/osbackupmsg.txt
	fi

	if [ -f /tmp/osrestoremsg.txt ]; then
		gxmessage -title "系统还原信息" -file /tmp/osrestoremsg.txt  -center
		rm -rf /tmp/osrestoremsg.txt
	fi

	${tools_dir}/vm_onZerogo.sh "$action"
}

function close_xwindowmgr() {
	pkill pcmanfm
	pkill jwm
	pkill fcitx
}

function notify_app() {
	echo "#x11restarted" > ${NOTIFY_PIPE}
}

source /exbin/tools/vm_config.sh
echo "正在为当前用户调用 /etc/profile"
source /etc/profile

if [ -x ./custom_startx.sh ]; then
	echo "正在调用 启动X的自定义脚本"
	# ./custom_startx.sh  2>&1 >$APP_STDIO_NAME <$APP_STDIO_NAME &
	./custom_startx.sh  2>&1 &
	echo2apk 'LinuxStarted'
	exit 0
fi


USE_XFCE4=`cat ${app_home}/app_boot_config/cfg_use_xfce4.txt 2>/dev/null`
# echo "USE_XFCE4_1: ${USE_XFCE4}"
if [ "$USE_XFCE4" == "" ]; then
	# echo "cat ${app_home}/app_boot_config/cfg_use_xfce4.txt"
	# cat ${app_home}/app_boot_config/cfg_use_xfce4.txt 2>/dev/null
	USE_XFCE4=0
fi

which startxfce4 >/dev/null 2>&1
if [ $? -ne 0 ]; then
	# echo "startxfce4 not found"
	USE_XFCE4=0
fi
# echo "USE_XFCE4_2: ${USE_XFCE4}"



if [ "$action" == "sresize" ]; then
	if [ ${USE_XVFB} -ne 1 ]; then
		close_xwindowmgr
		pid_tvnc=`pidof Xtigervnc`

		echo "pid_tvnc: $pid_tvnc"
		echo $APP_FBFILENAME
		cat $APP_FBFILENAME

		if [ "$pid_tvnc" != "" ]; then
			echo "正在添加显示分辨率: ${RECOMMEND_SCREEN_WIDTH}x${RECOMMEND_SCREEN_HEIGHT}"
			kill -s SIGUSR1 $pid_tvnc
		fi
		sleep 0.2
		source $APP_FBFILENAME
		xrandr
		xrandr -s ${RECOMMEND_SCREEN_WIDTH}x${RECOMMEND_SCREEN_HEIGHT}
		sleep 0.2

		notify_app
		start_xwindowmgr
	else
		close_xwindowmgr
		# close_xserver
		# start_xserver
		resize_screen ${RECOMMEND_SCREEN_WIDTH} ${RECOMMEND_SCREEN_HEIGHT}
		notify_app
		start_xwindowmgr
	fi

elif [ "$action" == "xserver" ]; then
	close_xwindowmgr
	close_xserver
	start_xserver
	notify_app
	start_xwindowmgr
elif [ "$action" == "xwinman" ]; then
	close_xwindowmgr
	start_xwindowmgr
else
	rm -rf /tmp/x_remote_server_addr


	autoruns_before_gui

	start_xserver
	run_once
	start_xwindowmgr

	autoruns_after_gui
fi

